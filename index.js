// index.js
// –ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª: Telegram + Express + OpenAI Vision
// –¢—Ä–µ–±—É–µ–º—ã–µ ENV (Render ‚Üí Environment):
// - BOT_TOKEN
// - OPENAI_API_KEY
// - OPENAI_VISION_MODEL (–æ–ø—Ü., –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o-mini)
// - WEBHOOK_HOST  (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://realtor-bot-xxxx.onrender.com)
// - WEBHOOK_PATH_SECRET  (–Ω–∞–ø—Ä–∏–º–µ—Ä: mysecretpath)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import 'dotenv/config';
import express from 'express';
import { Telegraf } from 'telegraf';
import OpenAI from 'openai';

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const {
  BOT_TOKEN,
  OPENAI_API_KEY,
  OPENAI_VISION_MODEL = 'gpt-4o-mini',
  WEBHOOK_HOST,              // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://realtor-bot-xxxx.onrender.com
  WEBHOOK_PATH_SECRET = 'secret-path'
} = process.env;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is missing');
if (!OPENAI_API_KEY) throw new Error('OPENAI_API_KEY is missing');
if (!WEBHOOK_HOST) console.warn('‚ö†Ô∏è WEBHOOK_HOST –Ω–µ –∑–∞–¥–∞–Ω: –≤–µ–±—Ö—É–∫ —á–µ—Ä–µ–∑ API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–º');

// Render –≤—ã–¥–∞—ë—Ç —Å–≤–æ–π –ø–æ—Ä—Ç
const PORT = process.env.PORT || 3000;
const WEBHOOK_PATH = `/telegraf/${WEBHOOK_PATH_SECRET}`;
const WEBHOOK_URL = `${WEBHOOK_HOST}${WEBHOOK_PATH}`;

const openai = new OpenAI({ apiKey: OPENAI_API_KEY });
const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 15_000 });

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–π –ø–æ —á–∞—Ç–∞–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const sessions = new Map();
/** –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è —á–∞—Ç–∞ */
function getSession(chatId) {
  if (!sessions.has(chatId)) {
    sessions.set(chatId, {
      target: null,      // "–ü—Ä–æ–¥–∞–∂–∞" | "–ê—Ä–µ–Ω–¥–∞" | "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
      lang: 'ru',        // 'ru' | 'en' | 'sr' ...
      meta: '',          // —Ç–µ–∫—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      photos: []         // [{fileId, fileUrl}]
    });
  }
  return sessions.get(chatId);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const normalizeTarget = (t) => {
  if (!t) return null;
  const s = String(t).toLowerCase();
  if (/(–ø—Ä–æ–¥–∞–∂–∞|sell|sale)/i.test(s)) return '–ü—Ä–æ–¥–∞–∂–∞';
  if (/(–∞—Ä–µ–Ω–¥–∞|rent|—Å–¥–∞—á–∞)/i.test(s)) return '–ê—Ä–µ–Ω–¥–∞';
  if (/(–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü|presentation)/i.test(s)) return '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è';
  return null;
};

const LANG_HINT = `–Ø–∑—ã–∫: ru/en/sr (–ø—Ä–∏–º–µ—Ä: "–Ø–∑—ã–∫: ru")`;

const META_TEMPLATE = `–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å, —Å–≤–æ–∏–º —Ç–µ–∫—Å—Ç–æ–º.
–ü–æ–¥—Å–∫–∞–∑–∫–∞ - –∞–¥—Ä–µ—Å, —Ç–∏–ø (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º), –ø–ª–æ—â–∞–¥—å, –∫–æ–º–Ω–∞—Ç—ã, —ç—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å, –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏.
–î–æ–∫—É–º–µ–Ω—Ç—ã: –ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –≤—ã–ø–∏—Å–∫–∞ –ï–ì–†–ù, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–ª–≥–æ–≤.
–î–æ–º –∏ —Ä–∞–π–æ–Ω: –º–∞—Ç–µ—Ä–∏–∞–ª, –ª–∏—Ñ—Ç, –¥–≤–æ—Ä, —Ä—è–¥–æ–º —à–∫–æ–ª—ã/–º–∞–≥–∞–∑–∏–Ω—ã/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.
–ö–≤–∞—Ä—Ç–∏—Ä–∞: —Ä–µ–º–æ–Ω—Ç, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, –æ–∫–Ω–∞, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è –∏–∑ –º–µ–±–µ–ª–∏/—Ç–µ—Ö–Ω–∏–∫–∏.
–§–∏–Ω–∞–Ω—Å—ã: —Ü–µ–Ω–∞, —Ç–æ—Ä–≥, –∏–ø–æ—Ç–µ–∫–∞/–º–∞—Ç–∫–∞–ø–∏—Ç–∞–ª.
–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: —Ñ–æ—Ç–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, –æ–ø–∏—Å–∞–Ω–∏–µ...`;

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot.start(async (ctx) => {
  const chatId = ctx.chat.id;
  sessions.delete(chatId); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  const kb = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîÅ –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç', callback_data: 'NEW_FLOW' }]
      ]
    }
  };
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∏–µ–ª—Ç–æ—Ä. –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ.\n\n` +
    `–ù–∞–∂–º–∏ ¬´–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /new.\n` +
    `–ü–æ—Å–ª–µ ‚Äî ${LANG_HINT}`,
    kb
  );
});

bot.command('new', async (ctx) => {
  const chatId = ctx.chat.id;
  sessions.delete(chatId);
  const s = getSession(chatId);

  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã: "/new –ü—Ä–æ–¥–∞–∂–∞"
  const arg = (ctx.message.text || '').split(' ').slice(1).join(' ').trim();
  const tgt = normalizeTarget(arg);
  if (tgt) s.target = tgt;

  await ctx.reply(`–¶–µ–ª—å: ${s.target ? s.target : '–Ω–µ –∑–∞–¥–∞–Ω–∞'}\n${LANG_HINT}`);
  await ctx.reply(META_TEMPLATE);
  await ctx.reply('–ü–æ—Å–ª–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–∏—à–ª–∏ 3‚Äì12 —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
    reply_markup: { inline_keyboard: [[{ text: '–ì–æ—Ç–æ–≤–æ, —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ', callback_data: 'PHOTOS_DONE' }]] }
  });
});

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞: "–Ø–∑—ã–∫: ru"
bot.hears(/^\s*—è–∑—ã–∫\s*:\s*([a-z]{2})\s*$/i, async (ctx) => {
  const lang = ctx.match[1].toLowerCase();
  const chatId = ctx.chat.id;
  const s = getSession(chatId);
  s.lang = lang;
  await ctx.reply(`–û–∫, —è–∑—ã–∫: ${lang.toUpperCase()}`);
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å "–ü—Ä–æ–¥–∞–∂–∞" –ø–æ—Å–ª–µ /new
bot.hears(/^(–ø—Ä–æ–¥–∞–∂–∞|–∞—Ä–µ–Ω–¥–∞|–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)$/i, async (ctx) => {
  const chatId = ctx.chat.id;
  const s = getSession(chatId);
  s.target = normalizeTarget(ctx.message.text) || s.target;
  await ctx.reply(`–¶–µ–ª—å: ${s.target || '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞'}`);
});

// –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ‚Äî –ø–µ—Ä–≤–æ–µ ¬´–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ¬ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ /new
bot.on('text', async (ctx, next) => {
  const chatId = ctx.chat.id;
  const s = getSession(chatId);

  const txt = (ctx.message?.text || '').trim();

  // —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø—Ä–æ–ø—É—Å—Ç–∏–º –¥–∞–ª—å—à–µ
  if (
    /^\/(start|new|help)/i.test(txt) ||
    /^—è–∑—ã–∫\s*:/i.test(txt) ||
    /^(–ø—Ä–æ–¥–∞–∂–∞|–∞—Ä–µ–Ω–¥–∞|–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)$/i.test(txt) ||
    /—Å–æ–∑–¥–∞–π\s+–æ–ø–∏—Å–∞–Ω–∏–µ/i.test(txt)
  ) return next();

  // –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–∏–º–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  if (!s.meta) {
    s.meta = txt;
    await ctx.reply('–ü—Ä–∏–Ω—è–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏—à–ª–∏ 3‚Äì12 —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
      reply_markup: { inline_keyboard: [[{ text: '–ì–æ—Ç–æ–≤–æ, —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ', callback_data: 'PHOTOS_DONE' }]] }
    });
    return;
  }

  return next();
});

// –§–æ—Ç–æ (–æ–¥–∏–Ω–æ—á–Ω—ã–µ –∏ –≤ –∞–ª—å–±–æ–º–∞—Ö)
bot.on('photo', async (ctx) => {
  const chatId = ctx.chat.id;
  const s = getSession(chatId);

  try {
    const photos = ctx.message.photo;
    if (!photos?.length) return;
    // –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
    const fileId = photos[photos.length - 1].file_id;
    const link = await ctx.telegram.getFileLink(fileId);

    if (!s.photos.find(p => p.fileId === fileId)) {
      s.photos.push({ fileId, fileUrl: link.href });
    }

    await ctx.reply(`–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ (–≤—Å–µ–≥–æ: ${s.photos.length})`, {
      reply_to_message_id: ctx.message.message_id
    });
  } catch (err) {
    console.error('PHOTO_HANDLER_ERROR:', err);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ñ–æ—Ç–æ üòî. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.');
  }
});

// –ö–Ω–æ–ø–∫–∞ ¬´–ì–æ—Ç–æ–≤–æ, —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ¬ª
bot.action('PHOTOS_DONE', async (ctx) => {
  const chatId = ctx.chat.id;
  const s = getSession(chatId);
  await ctx.answerCbQuery();

  if (!s.photos.length) {
    return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ 3‚Äì12 —Ñ–æ—Ç–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.');
  }

  await ctx.reply('–ì–æ—Ç–æ–≤–æ, —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ');
  await ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏: ¬´–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ¬ª.');
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Äî –ø–æ —Ñ—Ä–∞–∑–µ ¬´–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ¬ª
bot.hears(/—Å–æ–∑–¥–∞–π\s+–æ–ø–∏—Å–∞–Ω–∏–µ/i, async (ctx) => {
  const chatId = ctx.chat.id;
  const s = getSession(chatId);

  if (!s.photos.length) {
    return ctx.reply('–ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–ª–∞—Ç—å 3‚Äì12 —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ, —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ¬ª.');
  }

  const MAX_IMAGES = 8;                    // –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è Vision
  const imgs = s.photos.slice(0, MAX_IMAGES);

  const system = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Ä–∏–µ–ª—Ç–æ—Ä –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –°–µ—Ä–±–∏–∏ –≥ Novi Sad –∏ –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥.
-  –†–∞—Å–ø–æ–∑–Ω–∞–µ—à—å —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ (–º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç.–¥).
- –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã —Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —á—Ç–æ –∏–∑ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ—à—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ.
- –ü–∏—à–µ—à—å –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–ø–ª—è—é—Ç —Å –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ—á–µ–∫.
- –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ.
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ç–∏–ø–∞ #*
- –ï—Å–ª–∏ –≤–∏–¥–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ —Ñ–æ—Ç–æ, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Å–ø–æ—Ä–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –Ω–µ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥–æ–≤ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
- –†–∞—Å–ø–∞–∑–Ω–∞–µ—à—å –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ "36–º","36 –∫–≤ –º", "36 –∫–≤–º" —Ç–æ —ç—Ç–æ 36 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –ø–ª–æ—â–∞–¥—å –∏ —Ç.–¥, —Ü–∏—Ñ—Ä–∞ 36 —É–∫–∞–∑–∞–Ω–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–µ.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–∏–ø —Å–¥–µ–ª–∫–∏, –º–µ—Ç—Ä–∞–∂, —Ä–∞–π–æ–Ω/—É–ª–∏—Ü–∞)
2) –û–ø–∏—Å–∞–Ω–∏–µ: –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –º–µ–±–µ–ª—å/—Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —ç—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
3) –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ª–æ–∫–∞—Ü–∏—è
4) –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ (—Ü–µ–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω–æ —Å, –∫–æ–Ω—Ç–∞–∫—Ç—ã)
5) –ë–ª–æ–∫ ¬´–î–ª—è –ø–ª–æ—â–∞–¥–æ–∫¬ª: 3‚Äì5 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞

–ë–µ–∑ –≤–æ–¥—ã, —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã. –Ø–∑—ã–∫: ${s.lang || 'ru'}. –¶–µ–ª—å: ${s.target || '–ü—Ä–æ–¥–∞–∂–∞'}.`;

  const userText = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –∏ —Ñ–æ—Ç–æ.

–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:
${s.meta || '(–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç)'}.

–ò—Å–ø–æ–ª—å–∑—É–π –≤–∏–¥ –∏–∑ —Ñ–æ—Ç–æ: —Ä–µ–º–æ–Ω—Ç, —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, —Å–∞–Ω—É–∑–µ–ª, –∫—É—Ö–Ω—è, –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–∞, –æ–∫–Ω–∞/–≤–∏–¥, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—ä–µ–∑–¥–∞/–¥–æ–º–∞, –∏ —Ç.–¥.`;

  try {
    await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ‚Ä¶ 10‚Äì20 —Å–µ–∫—É–Ω–¥ ‚è≥');

    const userContent = [
      { type: 'text', text: userText },
      ...imgs.map(p => ({ type: 'image_url', image_url: { url: p.fileUrl } }))
    ];

    // OpenAI Vision
    const completion = await openai.chat.completions.create({
      model: OPENAI_VISION_MODEL,
      temperature: 0.7,
      messages: [
        { role: 'system', content: system },
        { role: 'user', content: userContent }
      ]
    });

    const draft = completion.choices?.[0]?.message?.content?.trim();
    if (!draft) throw new Error('Empty completion');

    await ctx.reply(draft, { disable_web_page_preview: true });

    // –°–±—Ä–æ—Å –ø–æ–¥ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (—è–∑—ã–∫/—Ü–µ–ª—å –æ—Å—Ç–∞–≤–∏–º)
    sessions.set(chatId, {
      target: s.target,
      lang: s.lang,
      meta: '',
      photos: []
    });

  } catch (err) {
    console.error('DESCRIBE_ERROR:', err);
    const msg =
      err?.status === 401 ? '–û—à–∏–±–∫–∞ 401 —É OpenAI (–∫–ª—é—á?). –ü—Ä–æ–≤–µ—Ä—å OPENAI_API_KEY –≤ Render ‚Üí Environment.'
    : err?.status === 429 ? '–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞/–ª–∏–º–∏—Ç OpenAI (429). –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –±–∏–ª–ª–∏–Ω–≥.'
    : '–ù–µ –≤—ã—à–ª–æ —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üòî. –Ø –∑–∞–ø–∏—Å–∞–ª –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∏ Render.';
    await ctx.reply(msg);
  }
});

// –ö–Ω–æ–ø–∫–∞ ¬´–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç¬ª –∏–∑ /start
bot.action('NEW_FLOW', async (ctx) => {
  await ctx.answerCbQuery();
  sessions.delete(ctx.chat.id);
  await ctx.reply('–û–∫! –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: –ü—Ä–æ–¥–∞–∂–∞/–ê—Ä–µ–Ω–¥–∞/–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è), –∑–∞—Ç–µ–º –∑–∞–¥–∞–π —è–∑—ã–∫ ‚Äî ' + LANG_HINT);
  await ctx.reply(META_TEMPLATE);
  await ctx.reply('–ü–æ—Å–ª–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—à–ª–∏ 3‚Äì12 —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
    reply_markup: { inline_keyboard: [[{ text: '–ì–æ—Ç–æ–≤–æ, —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ', callback_data: 'PHOTOS_DONE' }]] }
  });
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Express + Webhook ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const app = express();

// –ß—Ç–æ–±—ã Telegram –≤–∏–¥–µ–ª ¬´–∂–∏–≤–æ–π¬ª –∫–æ—Ä–µ–Ω—å
app.get('/', (req, res) => res.type('text/plain').send('OK'));

// –ü–æ–¥–∫–ª—é—á–∞–µ–º webhook callback Telegraf
app.use(bot.webhookCallback(WEBHOOK_PATH));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`‚úÖ Webhook server on ${PORT}, path=${WEBHOOK_PATH}`);

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å WEBHOOK_HOST)
  try {
    if (WEBHOOK_HOST) {
      await bot.telegram.setWebhook(WEBHOOK_URL);
      console.log('WEBHOOK_READY:', WEBHOOK_URL);
    } else {
      console.log('WEBHOOK_NOT_SET: –∑–∞–¥–∞–π—Ç–µ WEBHOOK_HOST –≤ ENV –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≤–µ–±—Ö—É–∫ —Ä—É–∫–∞–º–∏ —á–µ—Ä–µ–∑ Telegram API.');
    }
  } catch (err) {
    console.error('SET_WEBHOOK_ERROR:', err);
  }
});


